@using Domain;
@using MudBlazor

<div style="@Style; display:grid; grid-template-columns: 1fr 1fr;">
    <div style="display:flex; justify-content:center; align-items:center;">
        <ElementView IsSelected="true" DataModel="SelectedElementDataModel" Style="aspect-ratio:1; width:13rem; font-size:1.4rem;"/>
    </div>
    <div style="display:grid; grid-template-rows:repeat(6, 1fr); grid-template-columns: 1fr 1fr; grid-auto-flow:column; padding: 4rem 0 4rem 8rem;">
        @foreach (var familyDataModel in FamilyDataModels)
        {
            <div style="display: flex; flex-flow:row; align-items:center; cursor:pointer; filter: brightness(@($"{(SelectedFamilies.Count == 0 ? 100 : SelectedFamilies.Contains(familyDataModel.Family) ? 100 : 50)}%"))" @onclick="() => OnFamilyClick(familyDataModel)">
                <div style="width:1rem; height:1rem; border:1px solid #000; background-color:var(@(familyDataModel.CssColor));"></div>
                <div style="padding-left:0.3rem; font-weight:@(SelectedFamilies.Contains(familyDataModel.Family) ? "bold" : "normal");">@familyDataModel.Family.Name.ToLower()</div>
            </div>
        }
        <div style="display: flex; flex-flow:row; align-items:center;">
            <div style="width:1.2rem; height:1.2rem; background-color:#ff0; border-radius:0.5rem; display:flex; justify-content:center; align-items:center;">
                <MudIcon Color="Color.Dark" Icon="@Icons.Custom.Uncategorized.Radioactive" Size="Size.Small" />
            </div>
            <div style="padding-left:0.4rem; font-size:0.7rem;">radioactive elements mass in parentheses</div>
        </div>
    </div>
</div>

@code{
    [Parameter, EditorRequired] public List<ElementDataModel> ElementDataModels { get; set; } = default!;
    [Parameter, EditorRequired] public ElementDataModel SelectedElementDataModel { get; set; } = default!;
    [Parameter, EditorRequired] public string Style { get; set; } = default!;
    [Parameter, EditorRequired] public EventCallback OnFamilyChanged { get; set; } = default!;
    public List<FamilyDataModel> FamilyDataModels { get; set; } = new();
    public List<Family> SelectedFamilies { get; set; } = new();

    protected override void OnInitialized()
    {
        foreach(var family in Family.All)
        {
            FamilyDataModels.Add(new(family));
        }
    }

    public async void OnFamilyClick(FamilyDataModel familyDataModel)
    {
        RemoveOrAddFamily(familyDataModel);
        if (SelectedFamilies.Count > 0)
        {
            ElementDataModels.ForEach(x => x.FamilyDataModel.Highlighted = SelectedFamilies.Contains(x.FamilyDataModel.Family) ? true : false);
        }
        else
        {
            ElementDataModels.ForEach(x => x.FamilyDataModel.Highlighted = true);
        }

        await OnFamilyChanged.InvokeAsync();
    }

    public void RemoveOrAddFamily(FamilyDataModel familyDataModel)
    {
        if (SelectedFamilies.Contains(familyDataModel.Family))
        {
            SelectedFamilies.Remove(familyDataModel.Family);
        }
        else
        {
            SelectedFamilies.Add(familyDataModel.Family);
        }
    }
}